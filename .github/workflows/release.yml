name: Build and publish dask-geopandas to PyPI / GitHub

on:
  push:
    branches:
      - main  # just build the sdist & wheel, skip release
    tags:
      - "v*"
  pull_request:  # also build on PRs touching this file
    paths:
      - ".github/workflows/release.yml"
      - "MANIFEST.in"
      - "pyproject.toml"
      - "setup.py"

jobs:
  build:
    name: Build dask-geopandas
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build a binary wheel and a source tarball
        run: |
          python -m pip install --upgrade pip build
          python -m build

      - uses: actions/upload-artifact@v2
        with:
          path: ./dist/*
          retention-days: 5

  publish:
    name: Publish dask-geopandas to PyPI
    needs: [build]
    runs-on: ubuntu-latest
    # release on every tag
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Get Asset name
        run: |
          export PKG=$(ls dist/ | grep tar)
          set -- $PKG
          echo "name=$1" >> $GITHUB_ENV

      - name: Upload Release Asset (sdist) to GitHub
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/${{ env.name }}
          asset_name: ${{ env.name }}
          asset_content_type: application/zip
